buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'


version = mod_version
group = mod_group_id // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = modid

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'official', version: '1.18.2'
    mappings channel: mapping_channel, version: parch_mapping + "-" + mapping_version


    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            arg "-mixin.config=" + archivesBaseName + ".mixins.json"

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', modid

            mods {
                vaultmapper {
                    source sourceSets.main
                }
            }
        }

        server {
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            arg "-mixin.config=" + archivesBaseName + ".mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', modid

            mods {
                vaultmapper {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', modid

            mods {
                vaultmapper {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                vaultmapper {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
}


dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    implementation fg.deobf("curse.maven:vault-hunters-official-mod-458203:6604944")

    implementation fg.deobf("curse.maven:curios-309927:4418032")
    implementation fg.deobf("curse.maven:quark-243121:3840125")
    implementation fg.deobf("curse.maven:autoreglib-250363:3642382")
    implementation fg.deobf("curse.maven:geckolib-388172:4181370")
    implementation fg.deobf("curse.maven:jei-238222:4593548")
    implementation fg.deobf("curse.maven:sophisticated-backpacks-vault-hunters-edition-696425:4287544")
    implementation fg.deobf("curse.maven:sophisticated-core-618298:4665730")
    implementation fg.deobf("curse.maven:sophisticated-backpacks-422301:4637292")
    implementation fg.deobf("curse.maven:alexs-mobs-426558:3853078")
    implementation fg.deobf("curse.maven:citadel-331936:3783096")
    implementation fg.deobf("curse.maven:auxblocks-711533:4358959")
    implementation fg.deobf("curse.maven:reauth-237701:4408008")

    implementation fg.deobf("curse.maven:lazy-dfu-forge-460819:3544496")
    runtimeOnly fg.deobf("curse.maven:ferritecore-429235:4074294")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.6")) {
        jarJar.ranged(it, "[0.3.6,)")
    }
    implementation(jarJar('org.java-websocket:Java-WebSocket:1.5.7')) {
        jarJar.ranged(it, "[1.5.7,)")
    }

    implementation(jarJar('com.google.protobuf:protobuf-java:4.30.1')) {
        jarJar.ranged(it, "[4.30.1,)")
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    implementation 'org.java-websocket:Java-WebSocket:1.5.7'
    minecraftLibrary 'org.java-websocket:Java-WebSocket:1.5.7'

    implementation 'com.google.protobuf:protobuf-java:4.30.1'
    minecraftLibrary 'com.google.protobuf:protobuf-java:4.30.1'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

/*def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: mc_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        modid: modid, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}*/

// Example for how to get properties into the manifest for reading at runtime.
jar {
    archiveClassifier = ""
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : modid + "nodium",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : modid + "nodium",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${modid}.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.register('renameJar', Copy) {
    def jarTask = tasks.jarJar // Reference to the 'jar' task
    def jarFile = jarTask.archiveFile.get().asFile // Get the generated JAR file dynamically

    // Define the new name for the JAR file (you can modify this as needed)
    def newJarName = "${jarFile.name.replace("-all.jar", ".jar")}"

    // Copy the original JAR to the new file with the renamed JAR
    from jarFile
    into jarFile.parentFile // Use the directory where the JAR is located
    rename { String fileName ->
        newJarName // Rename the jar
    }

    // Optionally delete the original JAR file after renaming
    doLast {
        if (jarFile.exists()) {
            jarFile.delete()
        }
    }
}

// Ensure the renameJar task runs after the build task is completed
build.finalizedBy(renameJar)